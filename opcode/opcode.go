package opcode

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strconv"
)

var (
	NotLogInSet map[uint16]struct{} = map[uint16]struct{}{
		CWvsApp_SendBackupPacket: {},
	}
	NotLogOutSet map[uint16]struct{} = map[uint16]struct{}{}
)

// Convert opcode to map[uint16]string for Debug
func GenOpcodeMap(originPath, targetPath, mapName string) {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, originPath, nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}
	out, err := os.Create(targetPath)
	if err != nil {
		panic(err)
	}
	defer out.Close()
	fmt.Fprintln(out, "// Code generated by opcode_test, DO NOT EDIT.")
	fmt.Fprintln(out, "package opcode")
	fmt.Fprintf(out, "\nvar %s map[uint16]string = map[uint16]string{", mapName)
	fmt.Fprintln(out, "")
	ast.Inspect(f, func(n ast.Node) bool {
		switch v := n.(type) {
		case *ast.ValueSpec:
			for _, name := range v.Names {
				if value, err := strconv.Atoi(v.Values[0].(*ast.BasicLit).Value); err == nil {
					fmt.Fprintf(out, "\t%d: \"%s\",\n", value, name.Name)
				}
			}
		}
		return true
	})
	fmt.Fprintln(out, "}")
}
